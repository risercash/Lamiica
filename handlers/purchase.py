import asyncio
import json

import pandas as pd
import tobase
from aiogram.dispatcher.filters import Command, Text
from aiogram.dispatcher.storage import FSMContext
from aiogram.types import CallbackQuery, Message
from buttons import buttons as btn
from config import user_admin_id, ME, ADM
from loader import bot, dp

userData = {}
admin_message = {}


@dp.message_handler(Command('admin'))
async def admin(message: Message):
    if message.chat.id in user_admin_id:
        await message.answer('–†–µ–∂–∏–º Admin-Panel', reply_markup=btn.menu)


@dp.message_handler(Command('start'))
async def start(message: Message):
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {message.from_user.first_name} üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ¬´–ê–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º¬ª‚ùì‚ÅâÔ∏è‚ùì

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –Ω–∞–º –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è üîé –∏ —á–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å 
–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ –±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É 
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è

üí°–î–∞–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞, —á—Ç–æ –±—ã –ª—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏üí°""", reply_markup=btn.next)
    
    new_user = tobase.new_user(message.from_user)
    if new_user:
        if message.from_user.username == None:
            usr = f"{message.from_user.full_name} ({message.from_user.id})"
        else:
            usr = f"@{message.from_user.username} ({message.from_user.id})"

        await bot.send_message(ADM, usr)


@dp.callback_query_handler(text_contains="next")
async def nextme(call: CallbackQuery):
    await call.answer(cache_time=20)
    await call.message.answer("""–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ—Å—Ç–Ω–æ –∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ! 

‚òùÔ∏è–í—Ä–µ–º—è –∏ –¥–∞—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —è –Ω–∞–ø–∏—à—É —Ç–µ–±–µ –≤ –î–∏—Ä–µ–∫—Ç! 

‚òùÔ∏è–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —Ç—ã –Ω–µ –ø–æ–ª—É—á–∏—à—å –æ—Ç –º–µ–Ω—è —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ –î–∏—Ä–µ–∫—Ç –≤ –º–æ–µ–º üëâ[–ò–Ω—Å—Ç–∞–≥—Ä–∞–º!](https://instagram.com/alena.chugavina)""", reply_markup=btn.callBack, parse_mode='Markdown')


@dp.message_handler(Command("send"))
async def start(message: Message, state: FSMContext):
    if message.from_user.id != ADM and message.from_user.id != ME:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
    await state.set_state("wait_sms")


@dp.message_handler(state="wait_sms")
async def wait_sms(message: Message, state: FSMContext):
    await state.reset_state()
    users = await tobase.show_users()
    await message.answer(f"–ù–∞—à–µ–ª {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É.")
    send = 0
    for user in users:
        try:
            await bot.send_message(user["user_id"], message.text)
            send += 1
        except:
            pass
        await asyncio.sleep(0.5)
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫—É –∑–∞–∫–æ–Ω—á–∏–ª! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {send} —Å–æ–æ–±—â–µ–Ω–∏–π")
    

@dp.message_handler(Command("ankets"))
async def start(message: Message):
    ankets = await tobase.show_users()
    df = pd.DataFrame(ankets)
    df.to_excel('users.xlsx')
    with open('users.xlsx', 'rb') as file:
        await message.answer_document(file)